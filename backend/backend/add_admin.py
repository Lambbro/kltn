from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from models import base_models as models
from schemas.base_schemas import TaiKhoanCreate, GiangVienCreate
from services import ql_dang_ky_service
import asyncio
from database import get_db  # ƒê·∫£m b·∫£o b·∫°n c√≥ get_db ƒë·ªÉ l·∫•y session
from datetime import date

async def create_admin_account(db: AsyncSession):
    admin_email = "admin2@example.com"
    admin_quyen_han = 1  

    result = await db.execute(select(models.TaiKhoan).filter(models.TaiKhoan.email == admin_email))
    admin_account = result.scalars().first()

    if not admin_account:
        try:
            print("üîç Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n admin, ƒëang t·∫°o m·ªõi...")

            admin_data = GiangVienCreate(
                ma_gv="GV002",
                ten_gv="Admin User",
                anh_dai_dien=None,
                cccd="001234567891",
                gioi_tinh=True,
                ngay_sinh=date(1990, 1, 1),
                que_quan="H√† N·ªôi",
                email=admin_email,
                quyen_han=admin_quyen_han
            )

            await ql_dang_ky_service.QLDangKyService(db).tao_giang_vien(admin_data)

            # ‚úÖ TH√äM COMMIT
            await db.commit()  
            print("‚úÖ T√†i kho·∫£n admin ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")

        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o t√†i kho·∫£n admin: {e}")
            import traceback
            print(traceback.format_exc())  # In stack trace chi ti·∫øt
            await db.rollback()
    else:
        print("‚ö†Ô∏è T√†i kho·∫£n admin ƒë√£ t·ªìn t·∫°i.")

# Ch·∫°y script ƒë·ªÉ t·∫°o admin
async def main():
    async for db in get_db():  # L·∫•y database session
        await create_admin_account(db)

if __name__ == "__main__":
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = None

    if loop and loop.is_running():
        # N·∫øu trong m√¥i tr∆∞·ªùng async, ch·∫°y main() theo ki·ªÉu task
        asyncio.create_task(main())
    else:
        # N·∫øu l√† m√¥i tr∆∞·ªùng b√¨nh th∆∞·ªùng, d√πng asyncio.run()
        asyncio.run(main())